// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/extractor.proto

/*
Package extractor is a generated protocol buffer package.

It is generated from these files:
	protobuf/extractor.proto

It has these top-level messages:
	RepositoriesBatch
	FileUast
*/
package extractor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Batching to amortize DB load
type RepositoriesBatch struct {
	RepositoryId []string `protobuf:"bytes,1,rep,name=repository_id,json=repositoryId" json:"repository_id,omitempty"`
}

func (m *RepositoriesBatch) Reset()                    { *m = RepositoriesBatch{} }
func (m *RepositoriesBatch) String() string            { return proto.CompactTextString(m) }
func (*RepositoriesBatch) ProtoMessage()               {}
func (*RepositoriesBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RepositoriesBatch) GetRepositoryId() []string {
	if m != nil {
		return m.RepositoryId
	}
	return nil
}

type FileUast struct {
	RepoId  string `protobuf:"bytes,1,opt,name=repoId" json:"repoId,omitempty"`
	RepoUrl string `protobuf:"bytes,2,opt,name=repoUrl" json:"repoUrl,omitempty"`
	Path    string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Lang    string `protobuf:"bytes,4,opt,name=lang" json:"lang,omitempty"`
	// import "github.com/bblfsh/sdk/uast/generated.proto";
	// github.com.bblfsh.sdk.uast.Node file_uast;
	Uast      []byte `protobuf:"bytes,5,opt,name=uast,proto3" json:"uast,omitempty"`
	Reference string `protobuf:"bytes,6,opt,name=reference" json:"reference,omitempty"`
	Hash      []byte `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *FileUast) Reset()                    { *m = FileUast{} }
func (m *FileUast) String() string            { return proto.CompactTextString(m) }
func (*FileUast) ProtoMessage()               {}
func (*FileUast) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileUast) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *FileUast) GetRepoUrl() string {
	if m != nil {
		return m.RepoUrl
	}
	return ""
}

func (m *FileUast) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileUast) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *FileUast) GetUast() []byte {
	if m != nil {
		return m.Uast
	}
	return nil
}

func (m *FileUast) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *FileUast) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*RepositoriesBatch)(nil), "extractor.RepositoriesBatch")
	proto.RegisterType((*FileUast)(nil), "extractor.FileUast")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UastExtractor service

type UastExtractorClient interface {
	// Parses each file in the given set of repositories. Results are streamed
	// rather than returned at once (e.g. in a response message with a repeated field),
	// as each repository in a batch may contain a huge number of files.
	ParseEveryFileToUast(ctx context.Context, in *RepositoriesBatch, opts ...grpc.CallOption) (UastExtractor_ParseEveryFileToUastClient, error)
}

type uastExtractorClient struct {
	cc *grpc.ClientConn
}

func NewUastExtractorClient(cc *grpc.ClientConn) UastExtractorClient {
	return &uastExtractorClient{cc}
}

func (c *uastExtractorClient) ParseEveryFileToUast(ctx context.Context, in *RepositoriesBatch, opts ...grpc.CallOption) (UastExtractor_ParseEveryFileToUastClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UastExtractor_serviceDesc.Streams[0], c.cc, "/extractor.UastExtractor/ParseEveryFileToUast", opts...)
	if err != nil {
		return nil, err
	}
	x := &uastExtractorParseEveryFileToUastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UastExtractor_ParseEveryFileToUastClient interface {
	Recv() (*FileUast, error)
	grpc.ClientStream
}

type uastExtractorParseEveryFileToUastClient struct {
	grpc.ClientStream
}

func (x *uastExtractorParseEveryFileToUastClient) Recv() (*FileUast, error) {
	m := new(FileUast)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UastExtractor service

type UastExtractorServer interface {
	// Parses each file in the given set of repositories. Results are streamed
	// rather than returned at once (e.g. in a response message with a repeated field),
	// as each repository in a batch may contain a huge number of files.
	ParseEveryFileToUast(*RepositoriesBatch, UastExtractor_ParseEveryFileToUastServer) error
}

func RegisterUastExtractorServer(s *grpc.Server, srv UastExtractorServer) {
	s.RegisterService(&_UastExtractor_serviceDesc, srv)
}

func _UastExtractor_ParseEveryFileToUast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoriesBatch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UastExtractorServer).ParseEveryFileToUast(m, &uastExtractorParseEveryFileToUastServer{stream})
}

type UastExtractor_ParseEveryFileToUastServer interface {
	Send(*FileUast) error
	grpc.ServerStream
}

type uastExtractorParseEveryFileToUastServer struct {
	grpc.ServerStream
}

func (x *uastExtractorParseEveryFileToUastServer) Send(m *FileUast) error {
	return x.ServerStream.SendMsg(m)
}

var _UastExtractor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "extractor.UastExtractor",
	HandlerType: (*UastExtractorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ParseEveryFileToUast",
			Handler:       _UastExtractor_ParseEveryFileToUast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/extractor.proto",
}

func init() { proto.RegisterFile("protobuf/extractor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x5d, 0x5b, 0x53, 0x33, 0xb4, 0x07, 0x57, 0x91, 0x41, 0x7a, 0x28, 0xf1, 0x92, 0x53,
	0x15, 0xbd, 0x78, 0x16, 0x2a, 0xf4, 0x20, 0x48, 0xb0, 0x57, 0x65, 0x9b, 0x4e, 0x4d, 0x20, 0x74,
	0xc3, 0xec, 0x56, 0xec, 0x5f, 0xf2, 0x57, 0xca, 0x6c, 0x5d, 0x23, 0xf4, 0xf6, 0xe6, 0x7b, 0x33,
	0x30, 0xef, 0x01, 0xb6, 0x6c, 0xbd, 0x5d, 0x6e, 0xd7, 0x37, 0xf4, 0xe5, 0xd9, 0x94, 0xde, 0xf2,
	0x34, 0x20, 0x9d, 0xfe, 0x81, 0xec, 0x01, 0xce, 0x0a, 0x6a, 0xad, 0xab, 0xbd, 0xe5, 0x9a, 0xdc,
	0xa3, 0xf1, 0x65, 0xa5, 0xaf, 0x61, 0xc4, 0x11, 0xee, 0xde, 0xeb, 0x15, 0xaa, 0x49, 0x2f, 0x4f,
	0x8b, 0x61, 0x07, 0xe7, 0xab, 0xec, 0x5b, 0xc1, 0xe9, 0x53, 0xdd, 0xd0, 0xc2, 0x38, 0xaf, 0x2f,
	0x21, 0x11, 0x73, 0x2e, 0xab, 0x2a, 0x4f, 0x8b, 0xdf, 0x49, 0x23, 0x0c, 0x44, 0x2d, 0xb8, 0xc1,
	0xe3, 0x60, 0xc4, 0x51, 0x6b, 0xe8, 0xb7, 0xc6, 0x57, 0xd8, 0x0b, 0x38, 0x68, 0x61, 0x8d, 0xd9,
	0x7c, 0x60, 0x7f, 0xcf, 0x44, 0x0b, 0xdb, 0x1a, 0xe7, 0xf1, 0x64, 0xa2, 0xf2, 0x61, 0x11, 0xb4,
	0x1e, 0x43, 0xca, 0xb4, 0x26, 0xa6, 0x4d, 0x49, 0x98, 0x84, 0xe5, 0x0e, 0xc8, 0x45, 0x65, 0x5c,
	0x85, 0x83, 0xfd, 0x85, 0xe8, 0xbb, 0x37, 0x18, 0xc9, 0x9f, 0xb3, 0x98, 0x5b, 0x3f, 0xc3, 0xc5,
	0x8b, 0x61, 0x47, 0xb3, 0x4f, 0xe2, 0x9d, 0xc4, 0x78, 0xb5, 0x21, 0xc8, 0x78, 0xda, 0x95, 0x75,
	0x50, 0xcc, 0xd5, 0xf9, 0x3f, 0x37, 0x66, 0xcf, 0x8e, 0x6e, 0xd5, 0x32, 0x09, 0xc5, 0xde, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x7b, 0xc5, 0xab, 0x74, 0x01, 0x00, 0x00,
}
