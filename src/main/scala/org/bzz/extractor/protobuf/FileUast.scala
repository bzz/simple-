// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.bzz.extractor.protobuf



/** @param uast
  *  import "github.com/bblfsh/sdk/uast/generated.proto";
  *  github.com.bblfsh.sdk.uast.Node file_uast;
  */
@SerialVersionUID(0L)
final case class FileUast(
    repoId: String = "",
    repoUrl: String = "",
    path: String = "",
    lang: String = "",
    uast: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    reference: String = "",
    hash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[FileUast] with com.trueaccord.lenses.Updatable[FileUast] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (repoId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, repoId) }
      if (repoUrl != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, repoUrl) }
      if (path != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, path) }
      if (lang != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, lang) }
      if (uast != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, uast) }
      if (reference != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, reference) }
      if (hash != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(7, hash) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = repoId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = repoUrl
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = path
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = lang
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = uast
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(5, __v)
        }
      };
      {
        val __v = reference
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = hash
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(7, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.bzz.extractor.protobuf.FileUast = {
      var __repoId = this.repoId
      var __repoUrl = this.repoUrl
      var __path = this.path
      var __lang = this.lang
      var __uast = this.uast
      var __reference = this.reference
      var __hash = this.hash
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __repoId = _input__.readString()
          case 18 =>
            __repoUrl = _input__.readString()
          case 26 =>
            __path = _input__.readString()
          case 34 =>
            __lang = _input__.readString()
          case 42 =>
            __uast = _input__.readBytes()
          case 50 =>
            __reference = _input__.readString()
          case 58 =>
            __hash = _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      org.bzz.extractor.protobuf.FileUast(
          repoId = __repoId,
          repoUrl = __repoUrl,
          path = __path,
          lang = __lang,
          uast = __uast,
          reference = __reference,
          hash = __hash
      )
    }
    def withRepoId(__v: String): FileUast = copy(repoId = __v)
    def withRepoUrl(__v: String): FileUast = copy(repoUrl = __v)
    def withPath(__v: String): FileUast = copy(path = __v)
    def withLang(__v: String): FileUast = copy(lang = __v)
    def withUast(__v: _root_.com.google.protobuf.ByteString): FileUast = copy(uast = __v)
    def withReference(__v: String): FileUast = copy(reference = __v)
    def withHash(__v: _root_.com.google.protobuf.ByteString): FileUast = copy(hash = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = repoId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = repoUrl
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = path
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = lang
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = uast
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 6 => {
          val __t = reference
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = hash
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(repoId)
        case 2 => _root_.scalapb.descriptors.PString(repoUrl)
        case 3 => _root_.scalapb.descriptors.PString(path)
        case 4 => _root_.scalapb.descriptors.PString(lang)
        case 5 => _root_.scalapb.descriptors.PByteString(uast)
        case 6 => _root_.scalapb.descriptors.PString(reference)
        case 7 => _root_.scalapb.descriptors.PByteString(hash)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.bzz.extractor.protobuf.FileUast
}

object FileUast extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.bzz.extractor.protobuf.FileUast] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.bzz.extractor.protobuf.FileUast] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.bzz.extractor.protobuf.FileUast = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.bzz.extractor.protobuf.FileUast(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(6), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.bzz.extractor.protobuf.FileUast] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.bzz.extractor.protobuf.FileUast(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ExtractorProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ExtractorProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.bzz.extractor.protobuf.FileUast(
  )
  implicit class FileUastLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.bzz.extractor.protobuf.FileUast]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.bzz.extractor.protobuf.FileUast](_l) {
    def repoId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.repoId)((c_, f_) => c_.copy(repoId = f_))
    def repoUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.repoUrl)((c_, f_) => c_.copy(repoUrl = f_))
    def path: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.path)((c_, f_) => c_.copy(path = f_))
    def lang: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.lang)((c_, f_) => c_.copy(lang = f_))
    def uast: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.uast)((c_, f_) => c_.copy(uast = f_))
    def reference: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.reference)((c_, f_) => c_.copy(reference = f_))
    def hash: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.hash)((c_, f_) => c_.copy(hash = f_))
  }
  final val REPOID_FIELD_NUMBER = 1
  final val REPOURL_FIELD_NUMBER = 2
  final val PATH_FIELD_NUMBER = 3
  final val LANG_FIELD_NUMBER = 4
  final val UAST_FIELD_NUMBER = 5
  final val REFERENCE_FIELD_NUMBER = 6
  final val HASH_FIELD_NUMBER = 7
}
